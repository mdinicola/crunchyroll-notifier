AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for WatchWizard Application
Globals:
  Function:
    Runtime: python3.9
    Timeout: 60
    Environment:
      Variables:
        ServiceName: !Ref ServiceName
        SecretName: !Sub "apps/${ServiceName}"
        SecretsManagerEndpoint: ""
Parameters:
  ServiceName:
    Type: String
    Default: CrunchyrollNotifier
  NotificationSound:
    Type: String
    Default: pianobar

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - Fn::Sub: arn:aws:iam::${AWS::AccountId}:policy/SecretsViewOnly
            
  SecretsManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "apps/${ServiceName}"
      Description: !Sub "Secret values for the ${ServiceName} application"
      SecretString: '{"CrunchyrollEmail": "", "CrunchyrollPassword": "", "CrunchyrollFiltersListId": "", "CrunchyrollFiltersIsDubbed": "", "CrunchyrollFiltersTimePeriodInDays": "", "PushoverUserToken": "", "PushoverAppToken": ""}'

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: !Sub "${ServiceName}-ApiGateway"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "./api.yaml"
      MethodSettings:
      - LoggingLevel: ERROR
        ResourcePath: "/*"
        HttpMethod: "*"

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub "${ServiceName}-Default-Usage-Plan"
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: !Ref ApiGatewayApi.Stage
      Description: !Sub "Default usage plan for the ${ServiceName} service"
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub "${ServiceName}-Default-API-Key"
      Description: !Sub "Default API key for the ${ServiceName} service"
      Enabled: True
      StageKeys:
        - RestApiId: !Ref ApiGatewayApi
          StageName: !Ref ApiGatewayApi.Stage

  UsagePlanApiKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties: 
      KeyId: !Ref ApiKey
      KeyType: 'API_KEY'
      UsagePlanId: !Ref UsagePlan

  GetCrunchyListsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-GetCrunchyLists"
      Role: !GetAtt LambdaRole.Arn
      CodeUri: crunchyroll_notifier/
      Handler: handlers/api_handler.get_crunchylists
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: "/api/crunchylists"
            Method: get
            Auth:
              ApiKeyRequired: true
  
  GetCrunchyListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-GetCrunchyList"
      Role: !GetAtt LambdaRole.Arn
      CodeUri: crunchyroll_notifier/
      Handler: handlers/api_handler.get_crunchylist
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: "/api/crunchylists/{id}"
            Method: get
            Auth:
              ApiKeyRequired: true

  GetRecentlyAddedEpisodesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-GetRecentlyAddedEpisodes"
      Role: !GetAtt LambdaRole.Arn
      CodeUri: crunchyroll_notifier/
      Handler: handlers/api_handler.get_recently_added_episodes
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: "/episodes/recently-added"
            Method: get
            Auth:
              ApiKeyRequired: true

  GetRecentlyAddedEpisodeNotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-GetRecentlyAddedEpisodeNotifications"
      Role: !GetAtt LambdaRole.Arn
      CodeUri: crunchyroll_notifier/
      Handler: handlers/api_handler.get_recently_added_episode_notifications
      Environment:
        Variables:
          NotificationSound: !Ref NotificationSound
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: "/episodes/recently-added/notifications"
            Method: get
            Auth:
              ApiKeyRequired: true

  NotifyOnRecentlyAddedEpisodesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-NotifyOnRecentlyAddedEpisodes"
      Role: !GetAtt LambdaRole.Arn
      CodeUri: crunchyroll_notifier/
      Handler: handlers/api_handler.notify_on_recently_added_episodes
      Environment:
        Variables:
          NotificationSound: !Ref NotificationSound
      Events:
        Post:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: "/episodes/recently-added/notify"
            Method: post
            Auth:
              ApiKeyRequired: true
        OnSchedule:
          Type: Schedule
          Properties:
            Name: "crunchyroll-notifier"
            Description: "Sends a notification if new anime is out"
            Enabled: true
            Schedule: cron(0 0 * * ? *) # UTC time -> 00:00 = 7:00 PM EST, 00:00 = 8:00 PM EDT

Outputs:
  CrunchyrollNotifierApi:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
